using UnityEngine;
using TMPro;
using System.Collections;
using System.Collections.Generic;

public class GameBoardView : MonoBehaviour
{
    [Header("Model + Prefabs")]
    public GamePlayModel model;
    public GameObject backgroundTilePrefab;
    public GameObject valueTilePrefab;

    [Header("UI Links")]
    public RectTransform boardContainer;
    public TextMeshProUGUI scoreText;
    public TextMeshProUGUI bestScore;

    [Header("Board Settings")]
    [SerializeField] private float tileSize = 100f;
    [SerializeField] private float spacing = 10f;

    private GameObject[,] backgroundTiles;
    private TileView[,] valueTiles;
    private bool isAnimating = false;

    void Start()
    {
        InitBoard();
        Refresh();
    }

    private void InitBoard()
    {
        backgroundTiles = new GameObject[model.Size, model.Size];
        valueTiles = new TileView[model.Size, model.Size];

        float boardSize = model.Size * tileSize + (model.Size - 1) * spacing;
        float startX = -boardSize / 2f + tileSize / 2f;
        float startY = boardSize / 2f - tileSize / 2f;

        for (int r = 0; r < model.Size; r++)
        {
            for (int c = 0; c < model.Size; c++)
            {
                GameObject bgTile = Instantiate(backgroundTilePrefab, boardContainer);
                RectTransform rect = bgTile.GetComponent<RectTransform>();
                rect.anchorMin = new Vector2(0.5f, 0.5f);
                rect.anchorMax = new Vector2(0.5f, 0.5f);
                rect.pivot = new Vector2(0.5f, 0.5f);
                rect.sizeDelta = new Vector2(tileSize, tileSize);
                float x = startX + c * (tileSize + spacing);
                float y = startY - r * (tileSize + spacing);
                rect.anchoredPosition = new Vector2(x, y);
                backgroundTiles[r, c] = bgTile;
            }
        }

        for (int r = 0; r < model.Size; r++)
        {
            for (int c = 0; c < model.Size; c++)
            {
                GameObject valueTile = Instantiate(valueTilePrefab, boardContainer);
                RectTransform rect = valueTile.GetComponent<RectTransform>();
                rect.anchorMin = new Vector2(0.5f, 0.5f);
                rect.anchorMax = new Vector2(0.5f, 0.5f);
                rect.pivot = new Vector2(0.5f, 0.5f);
                rect.sizeDelta = new Vector2(tileSize, tileSize);
                float x = startX + c * (tileSize + spacing);
                float y = startY - r * (tileSize + spacing);
                rect.anchoredPosition = new Vector2(x, y);
                TileView tv = valueTile.GetComponent<TileView>();
                tv.SetValue(0);
                valueTiles[r, c] = tv;
            }
        }
    }

    private Vector2 GetCellPosition(int r, int c)
    {
        return backgroundTiles[r, c].GetComponent<RectTransform>().anchoredPosition;
    }

    public void Refresh()
    {
        RefreshWithAnimation(false);
    }

    public void RefreshWithAnimation(bool animate = true)
    {
        if (isAnimating) return;

        if (animate && model.LastMoves.Count > 0)
        {
            StartCoroutine(AnimateMoves());
        }
        else
        {
            RefreshImmediate();
        }
    }

    private void RefreshImmediate()
    {
        for (int r = 0; r < model.Size; r++)
        {
            for (int c = 0; c < model.Size; c++)
            {
                valueTiles[r, c].SetValue(model.Board[r, c], true);
                valueTiles[r, c].GetComponent<RectTransform>().anchoredPosition = GetCellPosition(r, c);
            }
        }
        UpdateUI();
    }

    private IEnumerator AnimateMoves()
    {
        isAnimating = true;

        foreach (var move in model.LastMoves)
        {
            if (move.from != move.to)
            {
                valueTiles[move.from.x, move.from.y].SetValue(0, false);
            }
        }

        int completedMoves = 0;
        int totalMoves = model.LastMoves.Count;

        foreach (var move in model.LastMoves)
        {
            Vector2 fromPos = GetCellPosition(move.from.x, move.from.y);
            Vector2 toPos = GetCellPosition(move.to.x, move.to.y);
            TileView movingTile = valueTiles[move.from.x, move.from.y];

            movingTile.GetComponent<RectTransform>().anchoredPosition = fromPos;
            movingTile.SetValue(move.value, false);

            StartCoroutine(AnimateSingleMove(movingTile, fromPos, toPos, () =>
            {
                completedMoves++;
            }));
        }

        while (completedMoves < totalMoves)
        {
            yield return null;
        }

        foreach (var move in model.LastMoves)
        {
            if (move.isMerge)
            {
                valueTiles[move.from.x, move.from.y].SetValue(0, false);
                TileView destinationTile = valueTiles[move.to.x, move.to.y];
                destinationTile.SetValue(move.mergedValue, false);
                destinationTile.AnimateScalePop();
            }
        }

        for (int r = 0; r < model.Size; r++)
        {
            for (int c = 0; c < model.Size; c++)
            {
                valueTiles[r, c].SetValue(model.Board[r, c], false);
                valueTiles[r, c].GetComponent<RectTransform>().anchoredPosition = GetCellPosition(r, c);
            }
        }

        yield return new WaitForSeconds(0.05f);

        if (model.NewTilePosition.HasValue)
        {
            Vector2Int newPos = model.NewTilePosition.Value;
            int newValue = model.Board[newPos.x, newPos.y];
            valueTiles[newPos.x, newPos.y].AnimateSpawn(newValue);
        }

        //for (int r = 0; r < model.Size; r++)
        //    for (int c = 0; c < model.Size; c++)
        //        if (model.Board[r, c] == 0)
        //            valueTiles[r, c].SetValue(0, false);

        UpdateUI();
        isAnimating = false;
    }

    private IEnumerator AnimateSingleMove(TileView tile, Vector2 fromPos, Vector2 toPos, System.Action onComplete)
    {
        yield return StartCoroutine(tile.AnimateMoveCoroutine(fromPos, toPos));
        onComplete?.Invoke();
    }

    private void UpdateUI()
    {
        scoreText.text = model.Score.ToString();
        bestScore.text = model.MaxScore.ToString();
    }
}
using UnityEngine;

public class GameController : MonoBehaviour
{
    [SerializeField] private GameBoardView view;
    [SerializeField] private InputHandler _inputHandler;

    private GamePlayModel model;

    void Awake()
    {
        model = new GamePlayModel(4);
    }

    private void Start()
    {
        _inputHandler.OnMoveInput += MakeMove;
        view.model = model;
    }

    void Update()
    {

        // Отладочная перезагрузка
        if (Input.GetKeyDown(KeyCode.R))
        {
            OnRestartButton();
        }
    }

    private void MakeMove(Vector2Int dir)
    {
        bool moved = model.Move(dir);
        if (moved)
        {
            // Используем анимированное обновление
            view.RefreshWithAnimation(true);
        }
    }

    public void OnRestartButton()
    {
        model.Reset();
        view.Refresh();
    }

    public void Reload()
    {
        model.Reset();
        view.Refresh();
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

[Serializable]
public class GamePlayModel
{
    public int Size { get; private set; } = 4;
    public int[,] Board { get; private set; }
    public int Score { get; private set; }
    public int MaxScore { get; private set; }
    public bool IsGameOver { get; private set; }

    public class TileMove
    {
        public Vector2Int from;
        public Vector2Int to;
        public int value;
        public bool isMerge;
        public int mergedValue;
    }

    public Vector2Int? NewTilePosition { get; private set; } = null;
    public List<TileMove> LastMoves { get; private set; } = new List<TileMove>();
    private System.Random rng = new System.Random();

    private const string SAVE_KEY = "GameSaveData";

    public GamePlayModel(int size = 4)
    {
        Size = size;
        Board = new int[size, size];
        Load(); // 👈 спробуємо завантажити існуючу сесію
        if (IsEmpty())
        {
            Reset();
        }
    }

    public void Reset()
    {
        Score = 0;
        IsGameOver = false;
        Array.Clear(Board, 0, Board.Length);
        LastMoves.Clear();
        NewTilePosition = null;
        SpawnTile();
        SpawnTile();
        Save();
    }

    public bool Move(Vector2Int dir)
    {
        if (IsGameOver) return false;
        LastMoves.Clear();
        NewTilePosition = null;

        bool moved = false;
        bool[,] merged = new bool[Size, Size];

        int startRow = dir.y > 0 ? Size - 1 : 0;
        int endRow = dir.y > 0 ? -1 : Size;
        int stepRow = dir.y > 0 ? -1 : 1;

        int startCol = dir.x > 0 ? Size - 1 : 0;
        int endCol = dir.x > 0 ? -1 : Size;
        int stepCol = dir.x > 0 ? -1 : 1;

        List<TileMove> tempMoves = new List<TileMove>();

        for (int r = startRow; r != endRow; r += stepRow)
        {
            for (int c = startCol; c != endCol; c += stepCol)
            {
                if (Board[r, c] == 0) continue;

                int currentR = r;
                int currentC = c;
                Vector2Int startPos = new Vector2Int(r, c);
                int tileValue = Board[r, c];
                bool movedThisTile = false;
                Vector2Int finalPos = startPos;

                while (true)
                {
                    int nextR = currentR + dir.y;
                    int nextC = currentC + dir.x;

                    if (nextR < 0 || nextR >= Size || nextC < 0 || nextC >= Size)
                        break;

                    if (Board[nextR, nextC] == 0)
                    {
                        Board[nextR, nextC] = Board[currentR, currentC];
                        Board[currentR, currentC] = 0;
                        currentR = nextR;
                        currentC = nextC;
                        finalPos = new Vector2Int(currentR, currentC);
                        movedThisTile = true;
                        moved = true;
                    }
                    else if (Board[nextR, nextC] == Board[currentR, currentC] && !merged[nextR, nextC])
                    {
                        int newValue = Board[nextR, nextC] * 2;
                        Board[nextR, nextC] = newValue;
                        Board[currentR, currentC] = 0;
                        Score += newValue;
                        if (Score > MaxScore) MaxScore = Score; // 🔥 оновлюємо maxScore
                        merged[nextR, nextC] = true;
                        movedThisTile = true;
                        moved = true;

                        tempMoves.Add(new TileMove
                        {
                            from = startPos,
                            to = new Vector2Int(nextR, nextC),
                            value = tileValue,
                            isMerge = true,
                            mergedValue = newValue
                        });
                        break;
                    }
                    else break;
                }

                if (movedThisTile && finalPos != startPos)
                {
                    bool alreadyAddedAsMerge = tempMoves.Any(m => m.from == startPos && m.isMerge);

                    if (!alreadyAddedAsMerge)
                    {
                        tempMoves.Add(new TileMove
                        {
                            from = startPos,
                            to = finalPos,
                            value = tileValue,
                            isMerge = false
                        });
                    }
                }
            }
        }

        LastMoves.AddRange(tempMoves);

        if (moved)
        {
            SpawnTile();
            if (CheckGameOver()) IsGameOver = true;
            Save();
        }

        return moved;
    }

    private void SpawnTile()
    {
        List<Vector2Int> empties = new List<Vector2Int>();
        for (int r = 0; r < Size; r++)
            for (int c = 0; c < Size; c++)
                if (Board[r, c] == 0)
                    empties.Add(new Vector2Int(r, c));

        if (empties.Count == 0) return;

        Vector2Int pick = empties[rng.Next(empties.Count)];
        Board[pick.x, pick.y] = rng.NextDouble() < 0.9 ? 2 : 4;
        NewTilePosition = pick;
    }

    private bool CheckGameOver()
    {
        for (int r = 0; r < Size; r++)
        {
            for (int c = 0; c < Size; c++)
            {
                if (Board[r, c] == 0) return false;
                if (r + 1 < Size && Board[r, c] == Board[r + 1, c]) return false;
                if (c + 1 < Size && Board[r, c] == Board[r, c + 1]) return false;
            }
        }
        return true;
    }

    private bool IsEmpty()
    {
        foreach (int v in Board)
            if (v != 0)
                return false;
        return true;
    }

    [Serializable]
    private class SaveData
    {
        public int size;
        public int[] flatBoard;
        public int score;
        public int maxScore;
        public bool gameOver;
    }

    public void Save()
    {
        SaveData data = new SaveData
        {
            size = Size,
            flatBoard = Flatten(Board),
            score = Score,
            maxScore = MaxScore,
            gameOver = IsGameOver
        };

        string json = JsonUtility.ToJson(data);
        PlayerPrefs.SetString(SAVE_KEY, json);
        PlayerPrefs.Save();
    }

    public void Load()
    {
        if (!PlayerPrefs.HasKey(SAVE_KEY)) return;

        string json = PlayerPrefs.GetString(SAVE_KEY);
        SaveData data = JsonUtility.FromJson<SaveData>(json);
        if (data == null) return;

        Size = data.size;
        Board = Unflatten(data.flatBoard, Size);
        Score = data.score;
        MaxScore = data.maxScore;
        IsGameOver = data.gameOver;
    }

    public void ClearSave()
    {
        PlayerPrefs.DeleteKey(SAVE_KEY);
    }

    private int[] Flatten(int[,] board)
    {
        int[] flat = new int[Size * Size];
        int i = 0;
        for (int r = 0; r < Size; r++)
            for (int c = 0; c < Size; c++)
                flat[i++] = board[r, c];
        return flat;
    }

    private int[,] Unflatten(int[] flat, int size)
    {
        int[,] grid = new int[size, size];
        for (int i = 0; i < flat.Length; i++)
            grid[i / size, i % size] = flat[i];
        return grid;
    }
}
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using System.Collections;

public class TileView : MonoBehaviour
{
    [SerializeField] private Image background;
    [SerializeField] private TextMeshProUGUI valueText;
    [SerializeField] private float moveSpeed = 1500f; // пиксели в секунду
    [SerializeField] private float scaleAnimDuration = 0.15f;

    private int value;
    private RectTransform rectTransform;
    private Coroutine currentAnimation;

    private void Awake()
    {
        rectTransform = GetComponent<RectTransform>();
    }

    public void SetValue(int newValue, bool animate = false)
    {
        value = newValue;

        if (value == 0)
        {
            // Плитка пустая - делаем невидимой через прозрачность
            valueText.text = "";
            background.color = new Color32(0, 0, 0, 0);
            valueText.color = new Color32(0, 0, 0, 0);
            // Не отключаем GameObject чтобы не прерывать анимации
        }
        else
        {
            valueText.text = value.ToString();
            // ВАЖНО: Всегда устанавливаем правильный цвет текста и фона
            Color32 tileColor = GetColor(value);
            valueText.color = GetColor(value);
            background.color = tileColor;

            if (animate)
            {
                // Плавное появление
                if (currentAnimation != null)
                    StopCoroutine(currentAnimation);
                currentAnimation = StartCoroutine(FadeInCoroutine(tileColor));
            }
            else
            {
                // Мгновенное отображение - устанавливаем полную непрозрачность
                background.color = tileColor;
                valueText.color = GetColor(value);
            }
        }
    }

    // Анимация движения
    public void AnimateMove(Vector2 targetPosition, bool isMerge, System.Action onComplete = null)
    {
        if (currentAnimation != null)
            StopCoroutine(currentAnimation);

        currentAnimation = StartCoroutine(AnimateMoveCoroutine(rectTransform.anchoredPosition, targetPosition, onComplete));
    }

    public IEnumerator AnimateMoveCoroutine(Vector2 fromPosition, Vector2 toPosition, System.Action onComplete = null)
    {
        Vector2 startPosition = fromPosition;
        float distance = Vector2.Distance(startPosition, toPosition);
        float duration = distance / moveSpeed;

        // Минимальная и максимальная длительность
        duration = Mathf.Clamp(duration, 0.05f, 0.3f);

        float elapsed = 0f;

        while (elapsed < duration)
        {
            elapsed += Time.deltaTime;
            float t = Mathf.Clamp01(elapsed / duration);

            // Ease-out cubic для плавности
            t = 1f - Mathf.Pow(1f - t, 3f);

            rectTransform.anchoredPosition = Vector2.Lerp(startPosition, toPosition, t);
            yield return null;
        }

        rectTransform.anchoredPosition = toPosition;
        currentAnimation = null;
        onComplete?.Invoke();
    }

    // Анимация pop при слиянии
    public void AnimateScalePop()
    {
        if (currentAnimation != null)
            StopCoroutine(currentAnimation);

        currentAnimation = StartCoroutine(ScaleAnimation());
    }

    // Анимация появления новой плитки
    // Тепер цей метод приймає значення нової плитки
    public void AnimateSpawn(int newValue)
    {
        if (currentAnimation != null)
            StopCoroutine(currentAnimation);
        currentAnimation = StartCoroutine(SpawnCoroutine(newValue));
    }

    // Корутина також приймає значення
    private IEnumerator SpawnCoroutine(int newValue)
    {
        // Спочатку встановлюємо значення та масштаб 0
        value = newValue;

        // Тепер налаштовуємо вигляд (колір, текст).
        // Плитка ще невидима, бо її масштаб 0.
        if (value != 0)
        {
            transform.localScale = Vector3.zero;
            valueText.text = value.ToString();
            Color32 tileColor = GetColor(value);
            background.color = tileColor;
            valueText.color = GetColor(value);
        }
        else
        {
            valueText.text = "";
            background.color = new Color32(0, 0, 0, 0);
        }

        // Запускаємо анімацію масштабування від 0 до 1
        float elapsed = 0f;
        while (elapsed < scaleAnimDuration)
        {
            elapsed += Time.deltaTime;
            float t = elapsed / scaleAnimDuration;
            t = 1f - Mathf.Pow(1f - t, 2f);

            float scale = Mathf.Lerp(0f, 1f, t);
            transform.localScale = Vector3.one * scale;
            yield return null;
        }

        transform.localScale = Vector3.one;
        currentAnimation = null;
    }

    // Анимация "pop" при слиянии
    private IEnumerator ScaleAnimation()
    {
        float elapsed = 0f;
        float halfDuration = scaleAnimDuration / 2f;

        // Увеличиваем
        while (elapsed < halfDuration)
        {
            elapsed += Time.deltaTime;
            float t = elapsed / halfDuration;
            transform.localScale = Vector3.Lerp(Vector3.one, Vector3.one * 1.2f, t);
            yield return null;
        }

        elapsed = 0f;
        // Уменьшаем обратно
        while (elapsed < halfDuration)
        {
            elapsed += Time.deltaTime;
            float t = elapsed / halfDuration;
            transform.localScale = Vector3.Lerp(Vector3.one * 1.2f, Vector3.one, t);
            yield return null;
        }

        transform.localScale = Vector3.one;
        currentAnimation = null;
    }

    private IEnumerator FadeInCoroutine(Color32 targetColor)
    {
        Color32 startColor = new Color32(targetColor.r, targetColor.g, targetColor.b, 0);
        Color32 targetTextColor = GetColor(value);
        Color32 startTextColor = new Color32(targetTextColor.r, targetTextColor.g, targetTextColor.b, 0);

        float elapsed = 0f;
        while (elapsed < scaleAnimDuration)
        {
            elapsed += Time.deltaTime;
            float t = elapsed / scaleAnimDuration;

            // Анимируем прозрачность фона и текста
            background.color = Color.Lerp(startColor, targetColor, t);
            valueText.color = Color.Lerp(startTextColor, targetTextColor, t);
            yield return null;
        }

        background.color = targetColor;
        valueText.color = targetTextColor;
        currentAnimation = null;
    }

    private Color32 GetColor(int val)
    {
        switch (val)
        {
            case 2: return new Color32(0, 180, 255, 255);
            case 4: return new Color32(255, 150, 60, 255);
            case 8: return new Color32(255, 70, 180, 255);
            case 16: return new Color32(255, 50, 120, 255);
            case 32: return new Color32(0, 255, 180, 255);
            case 64: return new Color32(0, 255, 255, 255);
            case 128: return new Color32(255, 200, 50, 255);
            case 256: return new Color32(255, 100, 255, 255);
            case 512: return new Color32(150, 100, 255, 255);
            case 1024: return new Color32(80, 160, 255, 255);
            case 2048: return new Color32(255, 255, 255, 255);
            default: return new Color32(30, 30, 60, 255);
        }
    }
}
using UnityEngine;

public class FpsUnlocker : MonoBehaviour
{
    private void Awake()
    {
        Application.targetFrameRate = 120;
        Time.timeScale = 0.1f;
    }
}
using UnityEngine;
using System;

public class InputHandler : MonoBehaviour
{
    public event Action<Vector2Int> OnMoveInput; // Викликається при свайпі або натисканні клавіші

    [Header("Swipe Settings")]
    [SerializeField] private float minSwipeDistance = 50f; // Мінімальна довжина свайпу в пікселях

    private Vector2 startTouchPos;
    private Vector2 endTouchPos;
    private bool isSwiping = false;

    void Update()
    {
        // Загальна клавіатура (завжди доступна у збірках, де є клавіатура)
        HandleKeyboardInput();

        // Платформо-специфічні обробники:
#if UNITY_ANDROID || UNITY_IOS
        HandleTouchInput();
#endif

#if UNITY_STANDALONE || UNITY_EDITOR || UNITY_WEBGL
        HandleMouseInput();
#endif
    }

    // --- 1️⃣ Клавіатура (завжди) ---
    private void HandleKeyboardInput()
    {
        // Якщо потрібно перевести up/down як у твоєму проекті — роби заміну тут.
        if (Input.GetKeyDown(KeyCode.LeftArrow)) OnMoveInput?.Invoke(Vector2Int.left);
        if (Input.GetKeyDown(KeyCode.RightArrow)) OnMoveInput?.Invoke(Vector2Int.right);
        if (Input.GetKeyDown(KeyCode.UpArrow)) OnMoveInput?.Invoke(Vector2Int.down);
        if (Input.GetKeyDown(KeyCode.DownArrow)) OnMoveInput?.Invoke(Vector2Int.up);
    }

#if UNITY_ANDROID || UNITY_IOS
    // --- 2️⃣ Сенсор (тільки мобільні збірки) ---
    private void HandleTouchInput()
    {
        if (Input.touchCount == 0) return;

        Touch touch = Input.GetTouch(0);

        switch (touch.phase)
        {
            case TouchPhase.Began:
                startTouchPos = touch.position;
                isSwiping = true;
                break;

            case TouchPhase.Ended:
            case TouchPhase.Canceled:
                if (!isSwiping) return;
                endTouchPos = touch.position;
                DetectSwipeDirection(endTouchPos - startTouchPos);
                isSwiping = false;
                break;
        }
    }
#endif

#if UNITY_STANDALONE || UNITY_EDITOR || UNITY_WEBGL
    // --- 3️⃣ Миша (для редактора / ПК / WebGL) ---
    private void HandleMouseInput()
    {
        if (Input.GetMouseButtonDown(0))
        {
            startTouchPos = Input.mousePosition;
            isSwiping = true;
        }

        if (Input.GetMouseButtonUp(0) && isSwiping)
        {
            endTouchPos = Input.mousePosition;
            DetectSwipeDirection(endTouchPos - startTouchPos);
            isSwiping = false;
        }
    }
#endif

    // --- Основна логіка розпізнавання свайпу ---
    private void DetectSwipeDirection(Vector2 delta)
    {
        if (delta.magnitude < minSwipeDistance)
            return; // надто короткий свайп

        delta.Normalize();

        if (Mathf.Abs(delta.x) > Mathf.Abs(delta.y))
        {
            // Горизонтальний свайп
            if (delta.x > 0)
                OnMoveInput?.Invoke(Vector2Int.right);
            else
                OnMoveInput?.Invoke(Vector2Int.left);
        }
        else
        {
            // Вертикальний свайп
            if (delta.y > 0)
                OnMoveInput?.Invoke(Vector2Int.down);
            else
                OnMoveInput?.Invoke(Vector2Int.up);
        }
    }
}
